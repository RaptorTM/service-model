import info.*
import modules.*
import modules.config.*


pipeline {
    agent any

    stages {
        stage('Run main.groovy') {
            steps {
                script {
                    // Загружаем все необходимые классы
                    def support = load 'src/modules/support.groovy'
                    support.load_sm_classes()

                    echo "!!!!!!!!!!!!!!!!!! JENKINS_HOME: ${JENKINS_HOME}"
                    println "!!!!!!!!!!!!!!!!!! Current Folder !!!!!!!!!!!!!!!!!!!!!!!!"
                    // Выводим текущий путь
                    bat "echo Current Directory: %CD%"

                    // Выводим содержимое текущего каталога
                    bat(returnStdout: true, script: 'dir')
//
//                     // Запускаем файл main.groovy
//                     def groovyScript = load 'src/Main.groovy'
//                     groovyScript.run_test_script()
//
//
//                         def serviceModel = new serviceModel().getConfig()
//                         def commonBuildProps = new commonBuildProps().getConfig()
//                         def projectBuildProps = new buildProps().getConfig()
//
//                         def serviceInfo = new ServiceInfo()
//                         def clusterInfo = new ClusterInfo()
//                         def landscapeInfo = new LandscapeInfo()
//                         def deployEnvironmentInfo = new DeployEnvironmentInfo()
//                         def Services = serviceInfo.getServiceInfoByName('uber-bff', serviceModel)
//                         def build = new build()
//                         println Services['dockerfile']
//
//                         def deployEnvironment = deployEnvironmentInfo.getDeployEnvironmentInfoByName("dev", serviceModel)
//                         println deployEnvironment
//                         def cluster = clusterInfo.getClusterInfoByName(deployEnvironment.cluster, serviceModel)
//                         println cluster
//                         def landscape = landscapeInfo.getLandscapeInfoByName(cluster.landscape, serviceModel)
//                         println landscape
//
//                         def servicesToBuild = serviceInfo.getServicesForBuild(serviceModel)
//                         for (s in servicesToBuild) {
//                             println(s['name'])
//                             println(s['dockerfile'])
//                         }
//                         def servicesToDeploy = serviceInfo.getAllServicesFromModel(serviceModel)
//                         for (s in servicesToDeploy) {
//                             println(s['image'])
//                             println(s['type'])
//                         }
//                     //    build.setBuildPropsAsEnvVars("devzone",  commonBuildProps, projectBuildProps) //Работает только в linux
//                     }

                }
            }
        }
    }
}